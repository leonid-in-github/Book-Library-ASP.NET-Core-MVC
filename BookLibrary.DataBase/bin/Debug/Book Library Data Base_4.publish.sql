/*
Deployment script for dbMVCBookLibrary

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dbMVCBookLibrary"
:setvar DefaultFilePrefix "dbMVCBookLibrary"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [user]...';


GO
CREATE USER [user] FOR LOGIN [IIS APPPOOL\DefaultAppPool];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'user';


GO
PRINT N'Creating [dbo].[Accounts]...';


GO
CREATE TABLE [dbo].[Accounts] (
    [ID]        INT           IDENTITY (1, 1) NOT NULL,
    [Login]     NVARCHAR (32) NOT NULL,
    [Password]  NVARCHAR (16) NOT NULL,
    [ProfileId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Login] ASC),
    UNIQUE NONCLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Authors]...';


GO
CREATE TABLE [dbo].[Authors] (
    [ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Books]...';


GO
CREATE TABLE [dbo].[Books] (
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (64) NOT NULL,
    [Year]         DATETIME      NOT NULL,
    [Availability] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[BooksAuthors]...';


GO
CREATE TABLE [dbo].[BooksAuthors] (
    [BookId]   INT NOT NULL,
    [AuthorId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([BookId] ASC, [AuthorId] ASC)
);


GO
PRINT N'Creating [dbo].[BookTracking]...';


GO
CREATE TABLE [dbo].[BookTracking] (
    [ID]         INT      IDENTITY (1, 1) NOT NULL,
    [BookId]     INT      NOT NULL,
    [AccountId]  INT      NOT NULL,
    [ActionTime] DATETIME NOT NULL,
    [Action]     BIT      NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Profiles]...';


GO
CREATE TABLE [dbo].[Profiles] (
    [ID]        INT           IDENTITY (1, 1) NOT NULL,
    [FirstName] NVARCHAR (32) NOT NULL,
    [LastName]  NVARCHAR (32) NOT NULL,
    [Email]     NVARCHAR (32) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Sessions]...';


GO
CREATE TABLE [dbo].[Sessions] (
    [ID]              INT       IDENTITY (1, 1) NOT NULL,
    [AccountId]       INT       NOT NULL,
    [OpenDate]        DATETIME  NOT NULL,
    [LastRenewalDate] DATETIME  NULL,
    [CloseDate]       DATETIME  NULL,
    [SessionId]       CHAR (36) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([SessionId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books]
    ADD DEFAULT ((1)) FOR [Availability];


GO
PRINT N'Creating unnamed constraint on [dbo].[BookTracking]...';


GO
ALTER TABLE [dbo].[BookTracking]
    ADD DEFAULT ((1)) FOR [Action];


GO
PRINT N'Creating [dbo].[FK_AccountsProfiles]...';


GO
ALTER TABLE [dbo].[Accounts] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountsProfiles] FOREIGN KEY ([ProfileId]) REFERENCES [dbo].[Profiles] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_BooksAuthorsAuthorId]...';


GO
ALTER TABLE [dbo].[BooksAuthors] WITH NOCHECK
    ADD CONSTRAINT [FK_BooksAuthorsAuthorId] FOREIGN KEY ([AuthorId]) REFERENCES [dbo].[Authors] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_BooksAuthorsBookId]...';


GO
ALTER TABLE [dbo].[BooksAuthors] WITH NOCHECK
    ADD CONSTRAINT [FK_BooksAuthorsBookId] FOREIGN KEY ([BookId]) REFERENCES [dbo].[Books] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_BookTrackingAccountId]...';


GO
ALTER TABLE [dbo].[BookTracking] WITH NOCHECK
    ADD CONSTRAINT [FK_BookTrackingAccountId] FOREIGN KEY ([AccountId]) REFERENCES [dbo].[Accounts] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_BookTrackingBookId]...';


GO
ALTER TABLE [dbo].[BookTracking] WITH NOCHECK
    ADD CONSTRAINT [FK_BookTrackingBookId] FOREIGN KEY ([BookId]) REFERENCES [dbo].[Books] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SessionsAccountId]...';


GO
ALTER TABLE [dbo].[Sessions] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionsAccountId] FOREIGN KEY ([AccountId]) REFERENCES [dbo].[Accounts] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[CustomTrim]...';


GO

CREATE FUNCTION [dbo].[CustomTrim]
(
	@String NVARCHAR(MAX),
	@TrimChar NCHAR(1)
)
RETURNS NVARCHAR(MAX)
WITH SCHEMABINDING 
AS 
BEGIN
	DECLARE @Result NVARCHAR(MAX);
	SET @Result = @String;
	
	IF( LEN(@Result) > 1)
	BEGIN
	WHILE SUBSTRING(@Result, 1, 1) = @TrimChar
	BEGIN
		SET @Result = SUBSTRING(@Result, 2, LEN(@Result) - 1)
	END
	
	WHILE SUBSTRING(@Result, LEN(@Result), 1) = @TrimChar
	BEGIN
		SET @Result = SUBSTRING(@Result, 1, LEN(@Result) - 1)
	END
	END
	
	RETURN (@Result);
END
GO
PRINT N'Creating [dbo].[JoinBookAuthors]...';


GO

CREATE FUNCTION [dbo].[JoinBookAuthors]
(
	@BookId INT
)
RETURNS NVARCHAR(MAX)
WITH SCHEMABINDING 
AS 
BEGIN
	DECLARE @Result NVARCHAR(MAX);
	SET @Result = '';

	DECLARE @Author as NVARCHAR (64);
	
	DECLARE @AuthorCursor as CURSOR;
	
	SET @AuthorCursor = CURSOR FOR
	SELECT Name FROM 
		(SELECT AuthorId from dbo.BooksAuthors where BookId = @BookId) as BooksAuthorsV
		INNER JOIN
		dbo.Authors ON  BooksAuthorsV.AuthorId = Authors.ID
	ORDER BY Name;
	
	OPEN @AuthorCursor;
	
	FETCH NEXT FROM @AuthorCursor INTO @Author;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @Result = @Result + @Author + ', ';
		FETCH NEXT FROM @AuthorCursor INTO @Author;
	END
	CLOSE @AuthorCursor;
	DEALLOCATE @AuthorCursor;

	SET @Result = dbo.CustomTrim(@Result, ' ');
	SET @Result = dbo.CustomTrim(@Result, ',');

	RETURN (@Result);
END
GO
PRINT N'Creating [dbo].[AddAuthors]...';


GO

CREATE PROCEDURE [dbo].[AddAuthors]
	@AuthorsString NVARCHAR (1024)
AS
	DECLARE @Author as NVARCHAR (64);
	
	DECLARE @AuthorCursor as CURSOR;
	
	SET @AuthorsString = dbo.CustomTrim(@AuthorsString, ' ');
	SET @AuthorsString = dbo.CustomTrim(@AuthorsString, ',');
	SET @AuthorCursor = CURSOR FOR
	SELECT value FROM STRING_SPLIT(@AuthorsString, ',');
	
	OPEN @AuthorCursor;
	
	FETCH NEXT FROM @AuthorCursor INTO @Author;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @Author = dbo.CustomTrim(@Author, ' ');
		IF NOT EXISTS (SELECT * FROM Authors 
                   WHERE Name = @Author)
		BEGIN
			Insert into Authors (Name) values(@Author) 
		END
	 FETCH NEXT FROM @AuthorCursor INTO @Author;
	END
	CLOSE @AuthorCursor;
	DEALLOCATE @AuthorCursor;

RETURN 0
GO
PRINT N'Creating [dbo].[AddBookAuthor]...';


GO

CREATE PROCEDURE [dbo].[AddBookAuthor]
	@BookId INT,
	@AuthorId INT
AS
	IF NOT EXISTS (SELECT * FROM BooksAuthors 
                   WHERE BookId = @BookId AND AuthorId = @AuthorId)
	BEGIN
		Insert into BooksAuthors (BookId, AuthorId) values(@BookId, @AuthorId);
	END
RETURN 0
GO
PRINT N'Creating [dbo].[BindBookAuthors]...';


GO

CREATE PROCEDURE [dbo].[BindBookAuthors]
	@BookId INT,
	@Authors nvarchar (1024)
AS
	
	DECLARE @Author as NVARCHAR (64);
	DECLARE @AuthorId as INT;
	
	DECLARE @AuthorCursor as CURSOR;
	
	
	SET @Authors = dbo.CustomTrim(@Authors, ' ');
	SET @Authors = dbo.CustomTrim(@Authors, ',');
	SET @AuthorCursor = CURSOR FOR
	SELECT value FROM STRING_SPLIT(@Authors, ',');
	
	OPEN @AuthorCursor;
	
	FETCH NEXT FROM @AuthorCursor INTO @Author;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @Author = dbo.CustomTrim(@Author, ' ');
		SELECT TOP 1 @AuthorId = ID
		FROM Authors
		WHERE Name = @Author
		ORDER BY ID ASC;
		
		IF @AuthorId IS NOT NULL
		BEGIN
			IF NOT EXISTS (SELECT * FROM BooksAuthors 
					   WHERE BookId = @BookId AND AuthorId = @AuthorId)
			BEGIN
				Insert into BooksAuthors (BookId, AuthorId) values(@BookId, @AuthorId) 
			END
			FETCH NEXT FROM @AuthorCursor INTO @Author;
		END
	END
	CLOSE @AuthorCursor;
	DEALLOCATE @AuthorCursor;
	
RETURN 0
GO
PRINT N'Creating [dbo].[CanPutBook]...';


GO


CREATE PROCEDURE [dbo].[CanPutBook]
	@AccountId INT,
	@BookId INT,
	@Result BIT OUTPUT
AS
BEGIN
	DECLARE @LastGetUserId INT;

	SELECT @LastGetUserId = Result.AccountId FROM
	(SELECT AccountId, MAX(ActionTime) as LastTakeDateTime FROM BookTracking
	WHERE BookId = @BookId AND Action = 1
	GROUP BY AccountId) as Result;

	IF (@AccountId = @LastGetUserId)
	BEGIN
		SET @Result = 1;
	END
	ELSE 
	BEGIN
		SET @Result = 0;
	END
END;
GO
PRINT N'Creating [dbo].[ChangeAccountPassword]...';


GO


CREATE PROCEDURE [dbo].[ChangeAccountPassword]
	@AccountId INT,
	@Password NVARCHAR (32),
	@NewPassword NVARCHAR (32),
	@Result BIT OUTPUT
AS
	SET @Result = 0;
	DECLARE @AccountPassword NVARCHAR (32);
	SELECT @AccountPassword = Password
	FROM Accounts
	WHERE ID = @AccountId;

	IF (@AccountPassword = @Password)
	BEGIN
		UPDATE Accounts
		SET Password = @NewPassword
		WHERE ID = @AccountId;
		SET @Result = 1;
	END;
GO
PRINT N'Creating [dbo].[ClearAuthors]...';


GO

CREATE PROCEDURE [dbo].[ClearAuthors]
AS
	DECLARE @AuthorId as INT;
	
	DECLARE @AuthorCursor as CURSOR;
	
	SET @AuthorCursor = CURSOR FOR
	SELECT ID FROM Authors;
	
	OPEN @AuthorCursor;
	
	FETCH NEXT FROM @AuthorCursor INTO @AuthorId;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS (SELECT * FROM BooksAuthors 
                   WHERE AuthorId = @AuthorId)
		BEGIN
			DELETE FROM Authors WHERE ID = @AuthorId;
		END
		FETCH NEXT FROM @AuthorCursor INTO @AuthorId;
	END
	CLOSE @AuthorCursor;
	DEALLOCATE @AuthorCursor;
RETURN 0
GO
PRINT N'Creating [dbo].[CloseSession]...';


GO

CREATE PROCEDURE [dbo].[CloseSession]
	@SessionId CHAR(36),
	@CloseDate DATETIME,
	@Result INT OUTPUT
AS
	IF EXISTS (SELECT * FROM Sessions 
                   WHERE SessionId = @SessionId
				   )
	BEGIN
		UPDATE Sessions 
		SET CloseDate = @CloseDate
		WHERE SessionId = @SessionId
		SET @Result = 1;
	END
	ELSE
		SET @Result = 0;
GO
PRINT N'Creating [dbo].[DeleteAccount]...';


GO



CREATE PROCEDURE [dbo].[DeleteAccount]
	@AccountId INT,
	@Password NVARCHAR (32),
	@Result BIT OUTPUT
AS
	SET @Result = 0;
	DECLARE @AccountPassword NVARCHAR (32);
	SELECT @AccountPassword = Password
	FROM Accounts
	WHERE ID = @AccountId;

	IF (@AccountPassword = @Password)
	BEGIN
		DELETE FROM Accounts WHERE ID = @AccountId; 
		SET @Result = 1;
	END;
GO
PRINT N'Creating [dbo].[DeleteBook]...';


GO

CREATE PROCEDURE [dbo].[DeleteBook]
	@ID INT
AS
	delete from Books where ID = @ID
RETURN 0
GO
PRINT N'Creating [dbo].[GetBook]...';


GO

CREATE PROCEDURE [dbo].[GetBook]
	@BookID INT
AS
BEGIN
	SELECT ID, Name, Authors = dbo.JoinBookAuthors(@BookID), Year, Availability
	FROM Books
	WHERE ID = @BookID
	ORDER BY ID DESC;
END;
GO
PRINT N'Creating [dbo].[GetBooks]...';


GO

CREATE PROCEDURE [dbo].[GetBooks]
AS
BEGIN
	SELECT ID, Name, Authors = dbo.JoinBookAuthors(ID), Year, Availability
	FROM Books
	ORDER BY ID DESC;
END;
GO
PRINT N'Creating [dbo].[GetBooksAvaliable]...';


GO


create PROCEDURE [dbo].[GetBooksAvaliable]
AS
BEGIN
	SELECT ID, Name, Authors = dbo.JoinBookAuthors(ID), Year, Availability
	FROM Books
	WHERE Availability = 1
	ORDER BY Name
END;
GO
PRINT N'Creating [dbo].[GetBooksAvaliableDistinct]...';


GO

CREATE PROCEDURE [dbo].[GetBooksAvaliableDistinct]
AS
BEGIN
	SELECT min(ID) AS ID, Name, Authors, Year, Availability
	FROM (SELECT ID, Name, Authors = dbo.JoinBookAuthors(ID), Year, Availability
	FROM Books) AS T
	WHERE Availability = 1
	GROUP BY Name, Authors, Year, Availability;
END;
GO
PRINT N'Creating [dbo].[GetBooksByAccount]...';


GO


CREATE PROCEDURE [dbo].[GetBooksByAccount]
	@AccountId INT
AS
BEGIN
	SELECT ID, Name, Authors = dbo.JoinBookAuthors(ID), Year, Availability
	FROM
		(
		SELECT BookId, MAX(ActionTime) AS ActionTime
		FROM BookTracking
		WHERE Action = 1 AND AccountId = @AccountId
		GROUP BY BookId
		) AS BooksV
	INNER JOIN Books
	ON BooksV.BookId = Books.ID
	WHERE Availability = 0
	ORDER BY BooksV.ActionTime
END;
GO
PRINT N'Creating [dbo].[GetBooksDistinct]...';


GO

CREATE PROCEDURE [dbo].[GetBooksDistinct]
AS
BEGIN
	SELECT min(ID) AS ID, Name, Authors, Year, MAX(convert(TINYINT,Availability)) AS 'Availability'
	FROM (SELECT ID, Name, Authors = dbo.JoinBookAuthors(ID), Year, Availability
	FROM Books) AS T
	GROUP BY Name, Authors, Year;
END;
GO
PRINT N'Creating [dbo].[GetBookTrack]...';


GO



CREATE PROCEDURE [dbo].[GetBookTrack]
	@BookID INT,
	@TracksCount NVARCHAR(10)
AS
BEGIN
	IF (@TracksCount = 'All')
	BEGIN
		SELECT BookId, Name AS BookName, Login, ActionTime, Action
		FROM 
			(SELECT * from dbo.BookTracking where BookId = @BookID) as TrackV
			INNER JOIN
			dbo.Books as BookV ON  BookV.ID = TrackV.BookId
			INNER JOIN
			dbo.Accounts AS AccountV ON AccountV.ID = TrackV.AccountId
		ORDER BY ActionTime DESC;
	END;
	ELSE
	BEGIN
		DECLARE @TCount INT;
		
		SET @TCount = CASE WHEN TRY_CAST(@TracksCount AS INT) IS NULL
						THEN 10
						ELSE CAST(@TracksCount AS INT)
						END;
		SELECT TOP(@TCount) BookId, Name AS BookName, Login, ActionTime, Action
		FROM 
			(SELECT * from dbo.BookTracking where BookId = @BookID) as TrackV
			INNER JOIN
			dbo.Books as BookV ON  BookV.ID = TrackV.BookId
			INNER JOIN
			dbo.Accounts AS AccountV ON AccountV.ID = TrackV.AccountId
		ORDER BY ActionTime DESC;
	END;
END;
GO
PRINT N'Creating [dbo].[GetSessionLastRenewalDate]...';


GO

CREATE PROCEDURE [dbo].[GetSessionLastRenewalDate]
	@SessionId CHAR(36),
	@SessionLastRenewalDate DATETIME OUTPUT
AS
BEGIN
	DECLARE @SessionCloseDate DATETIME;
	SELECT @SessionCloseDate = CloseDate
	FROM Sessions
	WHERE SessionId = @SessionId;

	IF @SessionCloseDate IS NULL
	BEGIN
		SELECT @SessionLastRenewalDate = LastRenewalDate
		FROM Sessions
		WHERE SessionId = @SessionId;
		IF @SessionLastRenewalDate IS NULL
		BEGIN
			SELECT @SessionLastRenewalDate = OpenDate
			FROM Sessions
			WHERE SessionId = @SessionId;
		END
	END
	ELSE
	BEGIN
		SET @SessionLastRenewalDate = CAST('1753-1-1' AS DATETIME);
	END
END;
GO
PRINT N'Creating [dbo].[GetSessionUser]...';


GO

CREATE PROCEDURE [dbo].[GetSessionUser]
	@SessionId CHAR(36),
	@AccountId INT OUTPUT,
	@Login NVARCHAR(32) OUTPUT,
	@FirstName NVARCHAR(32) OUTPUT,
	@LastName NVARCHAR(32) OUTPUT,
	@Email NVARCHAR(32) OUTPUT
AS
BEGIN
	SELECT @AccountId = AccountsV.ID,
			@Login = AccountsV.Login,
			@FirstName = ProfilesV.FirstName,
			@LastName = ProfilesV.LastName,
			@Email = ProfilesV.Email
	FROM 
	(SELECT AccountId FROM Sessions WHERE SessionId = @SessionId) AS SessionV
	INNER JOIN 
	Accounts AS AccountsV ON SessionV.AccountId = AccountsV.ID
	INNER JOIN
	Profiles AS ProfilesV ON AccountsV.ProfileId = ProfilesV.ID;
END;
GO
PRINT N'Creating [dbo].[GetUser]...';


GO


CREATE PROCEDURE [dbo].[GetUser]
	@AccountId INT,
	@Login NVARCHAR(32) OUTPUT,
	@FirstName NVARCHAR(32) OUTPUT,
	@LastName NVARCHAR(32) OUTPUT,
	@Email NVARCHAR(32) OUTPUT
AS
BEGIN
	SELECT 
			@Login = Accounts.Login,
			@FirstName = ProfilesV.FirstName,
			@LastName = ProfilesV.LastName,
			@Email = ProfilesV.Email
	FROM 
	Accounts
	INNER JOIN
	Profiles AS ProfilesV ON Accounts.ProfileId = ProfilesV.ID
	WHERE Accounts.ID = @AccountId

END;
GO
PRINT N'Creating [dbo].[LoginAccount]...';


GO

CREATE PROCEDURE [dbo].[LoginAccount]
	@Login NVARCHAR (64),
	@Password NVARCHAR (32),
	@Result INT OUTPUT
AS
	DECLARE @AccountId INT;
	SET @AccountId = 0;
	SELECT @AccountId = ID
	FROM Accounts
	WHERE Login = @Login
	AND Password = @Password;
SET @Result = @AccountId

-- @AccountId - Logged In
-- 0 - Not Logged In
GO
PRINT N'Creating [dbo].[OpenSession]...';


GO

CREATE PROCEDURE [dbo].[OpenSession]
	@AccountId INT,
	@OpenDate DATETIME,
	@SessionId CHAR(36),
	@Result INT OUTPUT
AS
	IF NOT EXISTS (SELECT * FROM Sessions 
                   WHERE SessionId = @SessionId
				   )
	BEGIN
		INSERT INTO Sessions (AccountId, OpenDate, SessionId)
		VALUES (@AccountId, @OpenDate, @SessionId);
		SET @Result = 1;
	END
	ELSE 
		SET @Result = 0;
GO
PRINT N'Creating [dbo].[PutBook]...';


GO

CREATE PROCEDURE [dbo].[PutBook]
	@AccountId INT,
	@BookId INT
AS
BEGIN
	IF EXISTS (SELECT ID FROM Accounts WHERE ID = @AccountId)
	BEGIN
		IF EXISTS (SELECT ID FROM Books WHERE ID = @BookId)
		BEGIN
			DECLARE @Availability BIT;
			SELECT @Availability = Availability FROM Books WHERE ID = @BookId;
			IF (@Availability <> 1)
			BEGIN
				INSERT INTO BookTracking (BookId, AccountId, ActionTime, Action)
				VALUES (@BookId, @AccountId, CURRENT_TIMESTAMP, 0);
				UPDATE Books
				SET Availability = 1
				WHERE ID = @BookID
			END
		END
	END
	UPDATE Books
	SET Availability = 1
	WHERE ID = @BookID
END;
GO
PRINT N'Creating [dbo].[RegisterAccount]...';


GO


CREATE PROCEDURE [dbo].[RegisterAccount]
	@Login NVARCHAR (64),
	@Password NVARCHAR (32),
	@FirstName NVARCHAR (64),
	@LastName NVARCHAR (64),
	@Email NVARCHAR (32),
	@Result INT OUTPUT
AS
	IF NOT EXISTS (SELECT * FROM Accounts 
                   WHERE Login = @Login
				   )
	BEGIN
		DECLARE @ProfileId INT;
		DECLARE @AccountId INT;
		SET @ProfileId = NULL
		SELECT TOP 1 @ProfileId = ID
		FROM Profiles
		WHERE FirstName = @FirstName 
			AND LastName = @LastName
			AND Email = @Email
		ORDER BY ID ASC;
		IF @ProfileId IS NOT NULL
		BEGIN
			INSERT INTO Accounts (Login, Password, ProfileId)
			VALUES (@Login, @Password, @ProfileId);
			SET @AccountId = IDENT_CURRENT('Accounts');
		END
		ELSE
		BEGIN
			INSERT INTO Profiles (FirstName, LastName, Email)
			VALUES (@FirstName, @LastName, @Email);
			SET @ProfileId = IDENT_CURRENT('Profiles');
			INSERT INTO Accounts (Login, Password, ProfileId)
			VALUES (@Login, @Password, @ProfileId);
			SET @AccountId = IDENT_CURRENT('Accounts');
		END
		SET @Result = @AccountId
	END 
	ELSE
	BEGIN
		SET @Result = -1
	END
RETURN 0
GO
PRINT N'Creating [dbo].[RenewSession]...';


GO

CREATE PROCEDURE [dbo].[RenewSession]
	@SessionId CHAR(36),
	@RenewDate DATETIME,
	@Result INT OUTPUT
AS
	IF EXISTS (SELECT * FROM Sessions 
                   WHERE SessionId = @SessionId
				   )
	BEGIN
		UPDATE Sessions 
		SET LastRenewalDate = @RenewDate
		WHERE SessionId = @SessionId
		SET @Result = 1;
	END
	ELSE
		SET @Result = 0;
GO
PRINT N'Creating [dbo].[TakeBook]...';


GO

CREATE PROCEDURE [dbo].[TakeBook]
	@AccountId INT,
	@BookId INT
AS
BEGIN
	IF EXISTS (SELECT ID FROM Accounts WHERE ID = @AccountId)
	BEGIN
		IF EXISTS (SELECT ID FROM Books WHERE ID = @BookId)
		BEGIN
			DECLARE @Availability BIT;
			SELECT @Availability = Availability FROM Books WHERE ID = @BookId;
			IF (@Availability <> 0)
			BEGIN
				INSERT INTO BookTracking (BookId, AccountId, ActionTime, Action)
				VALUES (@BookId, @AccountId, CURRENT_TIMESTAMP, 1);
				UPDATE Books
				SET Availability = 0
				WHERE ID = @BookID
			END
		END
	END
END;
GO
PRINT N'Creating [dbo].[UpdateBookAuthors]...';


GO


CREATE PROCEDURE [dbo].[UpdateBookAuthors]
	@BookID INT,
	@NewAuthors NVARCHAR(1024) = NULL
AS
	DELETE FROM BooksAuthors WHERE BookId = @BookID;
	
		EXEC dbo.AddAuthors @AuthorsString = @NewAuthors;
		EXEC dbo.BindBookAuthors @BookId = @BookID, @Authors = @NewAuthors;
	
RETURN 0
GO
PRINT N'Creating [dbo].[AddBook]...';


GO


CREATE PROCEDURE [dbo].[AddBook]
	@Name NVARCHAR (64),
	@Authors nvarchar (1024) = NULL,
	@Year DATETIME,
	@Quantity INT = 1
AS
	EXEC dbo.AddAuthors @AuthorsString = @Authors;

	while (@Quantity > 0) 
	begin
		Insert into Books (Name, Year) values(@Name, @Year); 
		set @Quantity = @Quantity - 1;
		
		
			DECLARE @BookId AS INT;
			SET @BookId = IDENT_CURRENT('Books');
		
			EXEC dbo.BindBookAuthors @BookId = @BookId, @Authors = @Authors;
		
	end 
RETURN 0
GO
PRINT N'Creating [dbo].[UpdateBook]...';


GO

CREATE PROCEDURE [dbo].[UpdateBook]
	@ID INT,
	@NewName NVARCHAR(64),
	@NewAuthors NVARCHAR(1024) = NULL,
	@NewYear DATETIME
AS
	UPDATE Books
	SET Name = @NewName,
		Year = @NewYear
	WHERE ID = @ID
	
	EXEC dbo.UpdateBookAuthors @BookID = @ID, @NewAuthors = @NewAuthors;
	
RETURN 0
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [user];


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Accounts] WITH CHECK CHECK CONSTRAINT [FK_AccountsProfiles];

ALTER TABLE [dbo].[BooksAuthors] WITH CHECK CHECK CONSTRAINT [FK_BooksAuthorsAuthorId];

ALTER TABLE [dbo].[BooksAuthors] WITH CHECK CHECK CONSTRAINT [FK_BooksAuthorsBookId];

ALTER TABLE [dbo].[BookTracking] WITH CHECK CHECK CONSTRAINT [FK_BookTrackingAccountId];

ALTER TABLE [dbo].[BookTracking] WITH CHECK CHECK CONSTRAINT [FK_BookTrackingBookId];

ALTER TABLE [dbo].[Sessions] WITH CHECK CHECK CONSTRAINT [FK_SessionsAccountId];


GO
PRINT N'Update complete.';


GO
